'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _HTML5toTouch = require('./HTML5toTouch');

var _HTML5toTouch2 = _interopRequireDefault(_HTML5toTouch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _default = function _default(manager, sourceOptions) {
  var _this = this;

  _classCallCheck(this, _default);

  this.setup = function () {
    if (typeof window === 'undefined') {
      return;
    }

    if (_this.constructor.isSetUp) {
      throw new Error('Cannot have two MultiBackends at the same time.');
    }
    _this.constructor.isSetUp = true;
    _this.addEventListeners(window);
    _this.backends[_this.current].instance.setup();
  };

  this.teardown = function () {
    if (typeof window === 'undefined') {
      return;
    }

    _this.constructor.isSetUp = false;
    _this.removeEventListeners(window);
    _this.backends[_this.current].instance.teardown();
  };

  this.connectDragSource = function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _this.connectBackend('connectDragSource', args);
  };

  this.connectDragPreview = function () {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return _this.connectBackend('connectDragPreview', args);
  };

  this.connectDropTarget = function () {
    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    return _this.connectBackend('connectDropTarget', args);
  };

  this.previewEnabled = function () {
    return _this.backends[_this.current].preview;
  };

  this.addEventListeners = function (target) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _this.backends[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var backend = _step.value;

        if (backend.transition) {
          target.addEventListener(backend.transition.event, _this.backendSwitcher, true);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  };

  this.removeEventListeners = function (target) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = _this.backends[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var backend = _step2.value;

        if (backend.transition) {
          target.removeEventListener(backend.transition.event, _this.backendSwitcher, true);
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  };

  this.backendSwitcher = function (event) {
    var oldBackend = _this.current;

    var i = 0;
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = _this.backends[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var backend = _step3.value;

        if (i !== _this.current && backend.transition && backend.transition.check(event)) {
          _this.current = i;
          break;
        }
        i += 1;
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    if (_this.current !== oldBackend) {
      _this.backends[oldBackend].instance.teardown();
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = Object.keys(_this.nodes)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var id = _step4.value;

          var node = _this.nodes[id];
          node.handler();
          node.handler = _this.callBackend(node.func, node.args);
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      _this.backends[_this.current].instance.setup();

      var newEvent = new event.constructor(event.type, event);
      event.target.dispatchEvent(newEvent);
    }
  };

  this.callBackend = function (func, args) {
    var _backends$current$ins;

    return (_backends$current$ins = _this.backends[_this.current].instance)[func].apply(_backends$current$ins, _toConsumableArray(args));
  };

  this.connectBackend = function (func, args) {
    var nodeId = func + '_' + args[0];
    var handler = _this.callBackend(func, args);
    _this.nodes[nodeId] = { func: func, args: args, handler: handler };

    return function () {
      var _nodes$nodeId;

      var r = (_nodes$nodeId = _this.nodes[nodeId]).handler.apply(_nodes$nodeId, arguments);
      delete _this.nodes[nodeId];
      return r;
    };
  };

  var options = Object.assign({ backends: [] }, sourceOptions || {});

  if (options.backends.length < 1) {
    options.backends = _HTML5toTouch2.default.backends;
  }

  this.current = options.start || 0;

  this.backends = [];
  var _iteratorNormalCompletion5 = true;
  var _didIteratorError5 = false;
  var _iteratorError5 = undefined;

  try {
    for (var _iterator5 = options.backends[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
      var backend = _step5.value;

      if (!backend.backend) {
        throw new Error('You must specify a \'backend\' property in your Backend entry: ' + backend);
      }
      var transition = backend.transition;
      if (transition && !transition._isMBTransition) {
        throw new Error('You must specify a valid \'transition\' property (either undefined or the return of \'createTransition\') in your Backend entry: ' + backend);
      }
      this.backends.push({
        instance: new backend.backend(manager),
        preview: backend.preview || false,
        transition: transition
      });
    }
  } catch (err) {
    _didIteratorError5 = true;
    _iteratorError5 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion5 && _iterator5.return) {
        _iterator5.return();
      }
    } finally {
      if (_didIteratorError5) {
        throw _iteratorError5;
      }
    }
  }

  this.nodes = {};
}

// DnD Backend API


// Used by Preview component


// Multi Backend Listeners


// Switching logic
;

exports.default = _default;